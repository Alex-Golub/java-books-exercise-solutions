4.10 Compare and contrast the if single-selection statement and the while repetition statement.
How are these two statements similar?
How are they different?
=== ANS ===
They are similar in a way that if the boolean expresion evaluated to true
the inner code block will be executed otherwise it will be skipped.
if is a one time decision checking where while decision is checked as long as the decision is true



4.11 Explain what happens when a Java program attempts to divide one integer by another.
What happens to the fractional part of the calculation?
How can you avoid that outcome?
=== ANS ===
In Java, integer division will give result only the integral part of the result
i.e. the decimal part will be "truncated" so if we do e.g. 7/2 = 3 and not 3.5, the .5
will be truncated.
To get the full decimal result we must use on one side of the expresion a double value
so that the division will be carried out and will not truncate the fractional part
e.g. 7.0/2 = 3.5 or 7/2.0 = 3.5 or (double) 7/2 = 3.5 here we first cast 7 to double making it
a double value i.e. 7.0 and then division is carried out (casting has higher precedence the /)



4.12 Describe the two ways in which control statements can be combined.
=== ANS ===
1. Counter-Controlled - using a counter to control number of loop repetition
2. Sentinel-Controlled - using a sentinel value to end the loop (e.g. -1 to stop)



4.13 What type of repetition would be appropriate for calculating the sum of the first 100 positive integers?
What type would be appropriate for calculating the sum of an arbitrary number of positive integers?
Briefly describe how each of these tasks could be performed.
=== ANS ===
Calculating the sum of the first 100 positive integers => Counter-Controlled
1. declare counter and initialize it to 1
2. declare sum and initialize to zero
3. while counter is less then or equal to 100
4.   add counter value to sum
5.   increment counter by 1
6. print sum value which is sum of first 100 numbers
(NOTE: this can also be done using sum of first n number formula: n * (n - 1) / 2 where n is first n numbers)

Sum of an arbitrary number of positive integers? => Sentinel-Controlled
We dont know when the user will stop inputing numbers so we inform him that he can
stop the input process if he enter -1 or any other Sentinel value we choose
1. declare sum and initialize to zero
2. declare number and set it to 0
3. prompt user to enter number
4. set number to user input
5. while number is not -1
6.   add number from (4) to sum
6.   get number from user
7. print sum



4.14 What is the difference between preincrementing and postincrementing a variable?
=== ANS ===
pre-incrementing: first increment the value and then use it
e.g. int b = 5;
System.out.println(++b); // 6
post-incrementing: use the current value and only then increment it
e.g. int c = 5;
System.out.println(b++); // 5 is printed but now c is 6



4.15 Identify and correct the errors in each of the following pieces of code.
[Note: There may be more than one error in each piece of code.]
a) if (age >= 65); // ; after if will result compile-error
      System.out.println("Age is greater than or equal to 65");
   else
      System.out.println("Age is less than 65)"; // closing " mark is outside the parentheses
b) int x = 1, total; // total is no initialized
   while (x <= 10)
   {
    total += x; // because total hasn't been initialized Java will not allow using it thus compile-error here
    ++x;
   }
c) while (x <= 100)
    total += x;
    ++x; // x is out of scope resulting infinite while loop
d) while (y > 0)
   {
      System.out.println(y);
      ++y;
      // no closing braces thus compile error



4.16 What does the following program print?
=== ANS ===
1
4
9
16
25
36
49
64
81
100
Total is 385



4.25 What does the following program print?
=== ANS ===
if count value is even printing "++++++++" otherwise print "****"
result is:
****
++++++++
****
++++++++
****
++++++++
****
++++++++
****
++++++++



4.26 What does the following program print?
=== ANS ===
10 times "<" will be printed
and 10 times ">" will be printed
total of 100 times alternating
result is:
>>>>>>>>>>
<<<<<<<<<<
>>>>>>>>>>
<<<<<<<<<<
>>>>>>>>>>
<<<<<<<<<<
>>>>>>>>>>
<<<<<<<<<<
>>>>>>>>>>
<<<<<<<<<<



4.27 (Dangling-else Problem) Determine the output for each of the given sets of code when x
is 9 and y is 11 and when x is 11 and y is 9.
The compiler ignores the indentation in a Java program.
Also, the Java compiler always associates an else with the immediately preceding if unless told to
do otherwise by the placement of braces ({}).
On first glance, you may not be sure which if a particular else matches—this situation is referred
to as the “dangling-else problem.” We’ve eliminated the indentation from the following code to make
the problem more challenging.
[Hint: Apply the indentation conventions you’ve learned.]
=== ANS ===
a) if (x < 10)
    if (y > 10)
      System.out.println("*****");
    else
      System.out.println("#####");
   System.out.println("$$$$$");

// x = 9, y = 11
// "*****"
// "$$$$$"

// x = 11, y = 9
// "$$$$$"

b) if (x < 10) {
    if (y > 10)
      System.out.println("*****");
   } else {
      System.out.println("#####");
      System.out.println("$$$$$");
   }

// x = 9, y = 11
// "*****"

// x = 11, y = 9
// "#####"
// "$$$$$"



4.28 (Another Dangling-else Problem) Modify the given code to produce the output shown in
each part of the problem. Use proper indentation techniques. Make no changes other than inserting
braces and changing the indentation of the code.
The compiler ignores indentation in a Java program.
We’ve eliminated the indentation from the given code to make the problem more challenging.
[Note: It’s possible that no modification is necessary for some of the parts.]
=== ANS ===
if (y == 8)
if (x == 5)
System.out.println("@@@@@");
else
System.out.println("#####");
System.out.println("$$$$$");
System.out.println("&&&&&");

a) Assuming that x = 5 and y = 8, the following output is produced:
@@@@@
$$$$$
&&&&&

if (y == 8)
  if (x == 5)
    System.out.println("@@@@@");
  else
    System.out.println("#####");
System.out.println("$$$$$");
System.out.println("&&&&&");

b) Assuming that x = 5 and y = 8, the following output is produced:
@@@@@

if (y == 8)
  if (x == 5)
    System.out.println("@@@@@");
  else {
    System.out.println("#####");
    System.out.println("$$$$$");
    System.out.println("&&&&&");
  }

d) Assuming that x = 5 and y = 7, the following output is produced.
[Note: The last three output statements after the else are all part of a block.]
#####
$$$$$
&&&&&

if (y == 8) {
  if (x == 5)
    System.out.println("@@@@@");
} else {
    System.out.println("#####");
    System.out.println("$$$$$");
    System.out.println("&&&&&");
}


4.34 (What’s Wrong with This Code?) What is wrong with the following statement? Provide the
correct statement to add one to the sum of x and y.
System.out.println(++(x + y));
=== ANS ===
++ is unary operator which increment value of variable by one
(x + y) is not a variable thus we can't apply ++ to it.
First you have to create a variable to hold the sum and only then increment it with ++
int sum = x + y;
System.out.println(++sum);